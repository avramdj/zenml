# This is a basic workflow to help you get started with Actions
name: Publish

# Controls when the action will run. Triggers the workflow on push of a tag
on:
  push:
    tags:
      - '*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  publish:
    name: Build and publish Python üêç distributions üì¶ to PyPI
    runs-on: ubuntu-latest
    env:
      ZENML_DEBUG: 1
      ZENML_ANALYTICS_OPT_IN: false
    steps:
      - name: Get the version from the github tag ref
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

#      - name: Exit if tag does not start with v
#        if: ${{ !startsWith(steps.get_version.outputs.VERSION, 'v') }}
#        run: exit -1

      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry"

      - name: Install Dependencies
        run: |
          python -m poetry install
          python -m poetry run zenml integration install airflow -f
          python -m poetry run zenml integration install pytorch -f
          python -m poetry run zenml integration install gcp -f
          python -m poetry run pip install click~=8.0.3

      # This should be unnecessary, but good to run it.
      - name: Lint
        run: python -m poetry run bash scripts/lint.sh

      # Runs a set of commands using the runners shell
      - name: publish
        env: # Or as an environment variable
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          if [ "$(cat src/zenml/VERSION)" = "$(echo ${GITHUB_REF} | sed 's|refs/tags/||g')" ]; then ./scripts/publish.sh; else exit 1; fi

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_email: ${{ secrets.GCP_CLOUDBUILD_EMAIL }}
          service_account_key: ${{ secrets.GCP_CLOUDBUILD_KEY }}
          project_id: ${{ secrets.GCP_CLOUDBUILD_PROJECT }}

      # Cloudbuild
      - name: Build docker images
        run: |-
          gcloud builds submit \
            --quiet \
            --config=cloudbuild.yaml \
            --substitutions=TAG_NAME=${{github.ref_name}} .
